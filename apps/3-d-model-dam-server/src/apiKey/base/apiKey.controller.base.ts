/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApiKeyService } from "../apiKey.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApiKeyCreateInput } from "./ApiKeyCreateInput";
import { ApiKey } from "./ApiKey";
import { ApiKeyFindManyArgs } from "./ApiKeyFindManyArgs";
import { ApiKeyWhereUniqueInput } from "./ApiKeyWhereUniqueInput";
import { ApiKeyUpdateInput } from "./ApiKeyUpdateInput";
import { DownloadUrlFindManyArgs } from "../../downloadUrl/base/DownloadUrlFindManyArgs";
import { DownloadUrl } from "../../downloadUrl/base/DownloadUrl";
import { DownloadUrlWhereUniqueInput } from "../../downloadUrl/base/DownloadUrlWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApiKeyControllerBase {
  constructor(
    protected readonly service: ApiKeyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApiKey })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApiKey(@common.Body() data: ApiKeyCreateInput): Promise<ApiKey> {
    return await this.service.createApiKey({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ApiKey] })
  @ApiNestedQuery(ApiKeyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apiKeys(@common.Req() request: Request): Promise<ApiKey[]> {
    const args = plainToClass(ApiKeyFindManyArgs, request.query);
    return this.service.apiKeys({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async apiKey(
    @common.Param() params: ApiKeyWhereUniqueInput
  ): Promise<ApiKey | null> {
    const result = await this.service.apiKey({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApiKey(
    @common.Param() params: ApiKeyWhereUniqueInput,
    @common.Body() data: ApiKeyUpdateInput
  ): Promise<ApiKey | null> {
    try {
      return await this.service.updateApiKey({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApiKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApiKey(
    @common.Param() params: ApiKeyWhereUniqueInput
  ): Promise<ApiKey | null> {
    try {
      return await this.service.deleteApiKey({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/downloadUrls")
  @ApiNestedQuery(DownloadUrlFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DownloadUrl",
    action: "read",
    possession: "any",
  })
  async findDownloadUrls(
    @common.Req() request: Request,
    @common.Param() params: ApiKeyWhereUniqueInput
  ): Promise<DownloadUrl[]> {
    const query = plainToClass(DownloadUrlFindManyArgs, request.query);
    const results = await this.service.findDownloadUrls(params.id, {
      ...query,
      select: {
        apiKey: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expiryDate: true,
        id: true,

        model: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/downloadUrls")
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "update",
    possession: "any",
  })
  async connectDownloadUrls(
    @common.Param() params: ApiKeyWhereUniqueInput,
    @common.Body() body: DownloadUrlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      downloadUrls: {
        connect: body,
      },
    };
    await this.service.updateApiKey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/downloadUrls")
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "update",
    possession: "any",
  })
  async updateDownloadUrls(
    @common.Param() params: ApiKeyWhereUniqueInput,
    @common.Body() body: DownloadUrlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      downloadUrls: {
        set: body,
      },
    };
    await this.service.updateApiKey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/downloadUrls")
  @nestAccessControl.UseRoles({
    resource: "ApiKey",
    action: "update",
    possession: "any",
  })
  async disconnectDownloadUrls(
    @common.Param() params: ApiKeyWhereUniqueInput,
    @common.Body() body: DownloadUrlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      downloadUrls: {
        disconnect: body,
      },
    };
    await this.service.updateApiKey({
      where: params,
      data,
      select: { id: true },
    });
  }
}
