/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DownloadUrl as PrismaDownloadUrl,
  ApiKey as PrismaApiKey,
  Model as PrismaModel,
} from "@prisma/client";

export class DownloadUrlServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DownloadUrlCountArgs, "select">
  ): Promise<number> {
    return this.prisma.downloadUrl.count(args);
  }

  async downloadUrls(
    args: Prisma.DownloadUrlFindManyArgs
  ): Promise<PrismaDownloadUrl[]> {
    return this.prisma.downloadUrl.findMany(args);
  }
  async downloadUrl(
    args: Prisma.DownloadUrlFindUniqueArgs
  ): Promise<PrismaDownloadUrl | null> {
    return this.prisma.downloadUrl.findUnique(args);
  }
  async createDownloadUrl(
    args: Prisma.DownloadUrlCreateArgs
  ): Promise<PrismaDownloadUrl> {
    return this.prisma.downloadUrl.create(args);
  }
  async updateDownloadUrl(
    args: Prisma.DownloadUrlUpdateArgs
  ): Promise<PrismaDownloadUrl> {
    return this.prisma.downloadUrl.update(args);
  }
  async deleteDownloadUrl(
    args: Prisma.DownloadUrlDeleteArgs
  ): Promise<PrismaDownloadUrl> {
    return this.prisma.downloadUrl.delete(args);
  }

  async getApiKey(parentId: string): Promise<PrismaApiKey | null> {
    return this.prisma.downloadUrl
      .findUnique({
        where: { id: parentId },
      })
      .apiKey();
  }

  async getModel(parentId: string): Promise<PrismaModel | null> {
    return this.prisma.downloadUrl
      .findUnique({
        where: { id: parentId },
      })
      .model();
  }
}
